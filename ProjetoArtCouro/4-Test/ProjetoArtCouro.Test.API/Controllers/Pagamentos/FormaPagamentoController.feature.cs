// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ProjetoArtCouro.Test.API.Controllers.Pagamentos
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("FormaPagamentoController")]
    public partial class FormaPagamentoControllerFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "FormaPagamentoController.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "FormaPagamentoController", "\tPara funcionalidade cadastro de forma de pagamento\r\n\tEu como um usuário do siste" +
                    "ma\r\n\tDesejo utilizar os métodos CRUD da forma de pagamento.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Tentar cadastrar uma forma de pagamento sem preencher todos os campos")]
        public virtual void TentarCadastrarUmaFormaDePagamentoSemPreencherTodosOsCampos()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Tentar cadastrar uma forma de pagamento sem preencher todos os campos", null, ((string[])(null)));
#line 6
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
#line 7
 testRunner.Given("que preencha os dados da forma de pagamento com as seguintes informações:", ((string)(null)), table1, "Dado ");
#line 9
 testRunner.When("realizar uma chamada Post ao endereço \'api/FormaPagamento/CriarFormaPagamento\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 10
 testRunner.Then("retorne erro", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cadastrar uma forma de pagamento preenchendo todos os campos")]
        public virtual void CadastrarUmaFormaDePagamentoPreenchendoTodosOsCampos()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cadastrar uma forma de pagamento preenchendo todos os campos", null, ((string[])(null)));
#line 12
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "Descricao",
                        "Cartão"});
            table2.AddRow(new string[] {
                        "Ativo",
                        "true"});
#line 13
 testRunner.Given("que preencha os dados da forma de pagamento com as seguintes informações:", ((string)(null)), table2, "Dado ");
#line 17
 testRunner.When("realizar uma chamada Post ao endereço \'api/FormaPagamento/CriarFormaPagamento\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 18
 testRunner.Then("retorne sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pesquisar todas as formas de pagamentos cadastradas")]
        public virtual void PesquisarTodasAsFormasDePagamentosCadastradas()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pesquisar todas as formas de pagamentos cadastradas", null, ((string[])(null)));
#line 20
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "Descricao",
                        "Cartão"});
            table3.AddRow(new string[] {
                        "Ativo",
                        "true"});
#line 21
 testRunner.Given("que preencha os dados da forma de pagamento com as seguintes informações:", ((string)(null)), table3, "Dado ");
#line 25
 testRunner.When("realizar uma chamada Post ao endereço \'api/FormaPagamento/CriarFormaPagamento\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 26
 testRunner.Then("retorne sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line 27
 testRunner.When("realizar uma chamada Get ao endereço \'api/FormaPagamento/ObterListaFormaPagamento" +
                    "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 28
 testRunner.Then("retorne sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line 29
 testRunner.And("que o retorno tenha uma lista com \'1\' itens", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Editar uma forma de pagamento preenchendo todos os campos")]
        public virtual void EditarUmaFormaDePagamentoPreenchendoTodosOsCampos()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Editar uma forma de pagamento preenchendo todos os campos", null, ((string[])(null)));
#line 31
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "Descricao",
                        "Cartão"});
            table4.AddRow(new string[] {
                        "Ativo",
                        "true"});
#line 32
 testRunner.Given("que preencha os dados da forma de pagamento com as seguintes informações:", ((string)(null)), table4, "Dado ");
#line 36
 testRunner.When("realizar uma chamada Post ao endereço \'api/FormaPagamento/CriarFormaPagamento\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 37
 testRunner.Then("retorne sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table5.AddRow(new string[] {
                        "FormaPagamentoCodigo",
                        "1"});
            table5.AddRow(new string[] {
                        "Descricao",
                        "Cartão"});
            table5.AddRow(new string[] {
                        "Ativo",
                        "true"});
#line 38
 testRunner.Given("que preencha os dados da forma de pagamento com as seguintes informações:", ((string)(null)), table5, "Dado ");
#line 43
 testRunner.When("realizar uma chamada Put ao endereço \'api/FormaPagamento/EditarFormaPagamento\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 44
 testRunner.Then("retorne sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Excluir uma forma de pagamento por código")]
        public virtual void ExcluirUmaFormaDePagamentoPorCodigo()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Excluir uma forma de pagamento por código", null, ((string[])(null)));
#line 46
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table6.AddRow(new string[] {
                        "Descricao",
                        "Cartão"});
            table6.AddRow(new string[] {
                        "Ativo",
                        "true"});
#line 47
 testRunner.Given("que preencha os dados da forma de pagamento com as seguintes informações:", ((string)(null)), table6, "Dado ");
#line 51
 testRunner.When("realizar uma chamada Post ao endereço \'api/FormaPagamento/CriarFormaPagamento\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 52
 testRunner.Then("retorne sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line 53
 testRunner.When("realizar uma chamada Delete ao endereço \'api/FormaPagamento/ExcluirFormaPagamento" +
                    "/1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 54
 testRunner.Then("retorne sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
