// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ProjetoArtCouro.Test.API.Controllers.Contas
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ContaPagarController")]
    public partial class ContaPagarControllerFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ContaPagarController.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "ContaPagarController", "\t\tPara funcionalidade de contas a pagar\r\n\t\tEu como um usuário do sistema\r\n\t\tDesej" +
                    "o utilizar os métodos de consulta e de pagamento.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "Nome",
                        "Henrique"});
            table1.AddRow(new string[] {
                        "CPF",
                        "123.456.789.09"});
            table1.AddRow(new string[] {
                        "RG",
                        "224445556"});
            table1.AddRow(new string[] {
                        "Sexo",
                        "M"});
            table1.AddRow(new string[] {
                        "EstadoCivilId",
                        "1"});
            table1.AddRow(new string[] {
                        "EPessoaFisica",
                        "true"});
            table1.AddRow(new string[] {
                        "PapelPessoa",
                        "4"});
#line 7
 testRunner.Given("que preencha os dados do fornecedor com as seguintes informações:", ((string)(null)), table1, "Dado ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "Logradouro",
                        "Rua da vida"});
            table2.AddRow(new string[] {
                        "Bairro",
                        "Jardim mundo"});
            table2.AddRow(new string[] {
                        "Numero",
                        "400"});
            table2.AddRow(new string[] {
                        "Cidade",
                        "Sarandi"});
            table2.AddRow(new string[] {
                        "Cep",
                        "87112-540"});
            table2.AddRow(new string[] {
                        "UFId",
                        "16"});
#line 16
 testRunner.And("que preecha os dados do endereço do fornecedor com as seguintes informações:", ((string)(null)), table2, "E ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "Telefone",
                        "(44) 3232-5566"});
#line 24
 testRunner.And("que preecha os dados de meios de comunicação do fornecedor com as seguintes infor" +
                    "mações:", ((string)(null)), table3, "E ");
#line 27
 testRunner.When("realizar uma chamada Post ao endereço \'api/Fornecedor/CriarFornecedor\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "Descricao",
                        "1 Parcela"});
            table4.AddRow(new string[] {
                        "QuantidadeParcelas",
                        "1"});
            table4.AddRow(new string[] {
                        "Ativo",
                        "true"});
#line 29
 testRunner.Given("que preencha os dados da condicao de pagamento com as seguintes informações:", ((string)(null)), table4, "Dado ");
#line 34
 testRunner.When("realizar uma chamada Post ao endereço \'api/CondicaoPagamento/CriarCondicaoPagamen" +
                    "to\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table5.AddRow(new string[] {
                        "Descricao",
                        "Cartão"});
            table5.AddRow(new string[] {
                        "Ativo",
                        "true"});
#line 36
 testRunner.Given("que preencha os dados da forma de pagamento com as seguintes informações:", ((string)(null)), table5, "Dado ");
#line 40
 testRunner.When("realizar uma chamada Post ao endereço \'api/FormaPagamento/CriarFormaPagamento\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table6.AddRow(new string[] {
                        "Descricao",
                        "Sapato"});
            table6.AddRow(new string[] {
                        "UnidadeCodigo",
                        "3"});
            table6.AddRow(new string[] {
                        "PrecoCusto",
                        "10,00"});
            table6.AddRow(new string[] {
                        "PrecoVenda",
                        "20,00"});
#line 42
 testRunner.Given("que preencha os dados do produto com as seguintes informações:", ((string)(null)), table6, "Dado ");
#line 48
 testRunner.When("realizar uma chamada Post ao endereço \'api/Produto/CriarProduto\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table7.AddRow(new string[] {
                        "DataCadastro",
                        "08/10/2018 8:00"});
            table7.AddRow(new string[] {
                        "StatusCompra",
                        "Aberto"});
            table7.AddRow(new string[] {
                        "ValorTotalBruto",
                        "10,00"});
            table7.AddRow(new string[] {
                        "ValorTotalFrete",
                        "0,00"});
            table7.AddRow(new string[] {
                        "ValorTotalLiquido",
                        "10,00"});
#line 50
 testRunner.Given("que preencha os dados da compra com as seguintes informações:", ((string)(null)), table7, "Dado ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Codigo",
                        "Descricao",
                        "Quantidade",
                        "PrecoVenda",
                        "ValorBruto",
                        "ValorLiquido"});
            table8.AddRow(new string[] {
                        "1",
                        "Cinto",
                        "1",
                        "10,00",
                        "10,00",
                        "10,00"});
#line 57
 testRunner.And("que preecha os dados do item de compra com as seguintes informações:", ((string)(null)), table8, "E ");
#line 60
 testRunner.When("realizar uma chamada Post ao endereço \'api/Compra/CriarCompra\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table9.AddRow(new string[] {
                        "CodigoCompra",
                        "1"});
            table9.AddRow(new string[] {
                        "DataCadastro",
                        "08/10/2018 8:00"});
            table9.AddRow(new string[] {
                        "StatusCompra",
                        "Aberto"});
            table9.AddRow(new string[] {
                        "ValorTotalBruto",
                        "10,00"});
            table9.AddRow(new string[] {
                        "ValorTotalFrete",
                        "0,00"});
            table9.AddRow(new string[] {
                        "ValorTotalLiquido",
                        "10,00"});
            table9.AddRow(new string[] {
                        "FornecedorId",
                        "1"});
            table9.AddRow(new string[] {
                        "FormaPagamentoId",
                        "1"});
            table9.AddRow(new string[] {
                        "CondicaoPagamentoId",
                        "1"});
#line 62
 testRunner.Given("que preencha os dados da compra com as seguintes informações:", ((string)(null)), table9, "Dado ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Codigo",
                        "Descricao",
                        "Quantidade",
                        "PrecoVenda",
                        "ValorBruto",
                        "ValorLiquido"});
            table10.AddRow(new string[] {
                        "1",
                        "Cinto",
                        "1",
                        "10,00",
                        "10,00",
                        "10,00"});
#line 73
 testRunner.And("que preecha os dados do item de compra com as seguintes informações:", ((string)(null)), table10, "E ");
#line 76
 testRunner.When("realizar uma chamada Put ao endereço \'api/Compra/EditarCompra\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pesquisar as contas a pagar sem filtros")]
        public virtual void PesquisarAsContasAPagarSemFiltros()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pesquisar as contas a pagar sem filtros", null, ((string[])(null)));
#line 78
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
#line 79
 testRunner.Given("que preencha os dados do filtro de pesquisa de contas a pagar com as seguintes in" +
                    "formações:", ((string)(null)), table11, "Dado ");
#line 81
 testRunner.When("realizar uma chamada Post ao endereço \'api/ContaPagar/PesquisaContaPagar\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 82
 testRunner.Then("retorne sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pesquisar as contas a pagar por código da compra, código do fornecedor, data de e" +
            "missão, data de vencimento, nome do fornecedor, CPFCNPJ, status")]
        public virtual void PesquisarAsContasAPagarPorCodigoDaCompraCodigoDoFornecedorDataDeEmissaoDataDeVencimentoNomeDoFornecedorCPFCNPJStatus()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pesquisar as contas a pagar por código da compra, código do fornecedor, data de e" +
                    "missão, data de vencimento, nome do fornecedor, CPFCNPJ, status", null, ((string[])(null)));
#line 84
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table12.AddRow(new string[] {
                        "CodigoCompra",
                        "1"});
            table12.AddRow(new string[] {
                        "CodigoFornecedor",
                        "1"});
            table12.AddRow(new string[] {
                        "DataEmissao",
                        "08/10/2018"});
            table12.AddRow(new string[] {
                        "DataVencimento",
                        "08/10/2018"});
            table12.AddRow(new string[] {
                        "NomeFornecedor",
                        "Henrique"});
            table12.AddRow(new string[] {
                        "CPFCNPJ",
                        "123.456.789.09"});
            table12.AddRow(new string[] {
                        "StatusId",
                        "1"});
#line 85
 testRunner.Given("que preencha os dados do filtro de pesquisa de contas a pagar com as seguintes in" +
                    "formações:", ((string)(null)), table12, "Dado ");
#line 94
 testRunner.When("realizar uma chamada Post ao endereço \'api/ContaPagar/PesquisaContaPagar\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 95
 testRunner.Then("retorne sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pagar contas")]
        public virtual void PagarContas()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pagar contas", null, ((string[])(null)));
#line 97
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "CodigoContaPagar",
                        "CodigoCompra",
                        "CodigoFornecedor",
                        "DataEmissao",
                        "DataVencimento",
                        "NomeFornecedor",
                        "CPFCNPJ",
                        "StatusId",
                        "ValorDocumento",
                        "Pago"});
            table13.AddRow(new string[] {
                        "1",
                        "1",
                        "1",
                        "08/10/2018",
                        "08/10/2018",
                        "Henrique",
                        "123.456.789.09",
                        "1",
                        "10,00",
                        "True"});
#line 98
 testRunner.Given("que preencha os dados da contas a pagar com as seguintes informações:", ((string)(null)), table13, "Dado ");
#line 101
 testRunner.When("realizar uma chamada Put ao endereço \'api/ContaPagar/PagarConta\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 102
 testRunner.Then("retorne sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
